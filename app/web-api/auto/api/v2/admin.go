// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.1.0

package v2

import (
	"context"
	"net/http"

	"github.com/alimy/freecar/idle/model/web"
	"github.com/alimy/mir/v4"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/route"
)

type _binding_ interface {
	Bind(context.Context, *app.RequestContext) mir.Error
}

type _render_ interface {
	Render(context.Context, *app.RequestContext)
}

type _default_ interface {
	Bind(context.Context, *app.RequestContext, any) mir.Error
	Render(context.Context, *app.RequestContext, any, mir.Error)
}

type Admin interface {
	_default_

	// Chain provide handlers chain for hertz
	Chain() []app.HandlerFunc

	SiteInfo(context.Context, *app.RequestContext, *web.SiteInfoReq) (*web.SiteInfoResp, mir.Error)
	ChangeUserStatus(*web.ChangeUserStatusReq) mir.Error

	mustEmbedUnimplementedAdminServant()
}

// RegisterAdminServant register Admin servant to hertz
func RegisterAdminServant(e *route.Engine, s Admin) {
	router := e.Group("v2")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.Handle("GET", "/admin/site/status", func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}
		req := new(web.SiteInfoReq)
		if err := s.Bind(c, ctx, req); err != nil {
			s.Render(c, ctx, nil, err)
			return
		}
		resp, err := s.SiteInfo(c, ctx, req)
		s.Render(c, ctx, resp, err)
	})
	router.Handle("POST", "/admin/user/status", func(c context.Context, ctx *app.RequestContext) {
		select {
		case <-c.Done():
			return
		default:
		}
		req := new(web.ChangeUserStatusReq)
		if err := s.Bind(c, ctx, req); err != nil {
			s.Render(c, ctx, nil, err)
			return
		}
		s.Render(c, ctx, nil, s.ChangeUserStatus(req))
	})
}

// UnimplementedAdminServant can be embedded to have forward compatible implementations.
type UnimplementedAdminServant struct{}

func (UnimplementedAdminServant) Chain() []app.HandlerFunc {
	return nil
}

func (UnimplementedAdminServant) SiteInfo(c context.Context, ctx *app.RequestContext, req *web.SiteInfoReq) (*web.SiteInfoResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedAdminServant) ChangeUserStatus(req *web.ChangeUserStatusReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedAdminServant) mustEmbedUnimplementedAdminServant() {}
