// Code generated by hertz generator.

package trip

import (
	"context"

	base "github.com/alimy/freecar/app/api/biz/model/base"
	trip "github.com/alimy/freecar/app/api/biz/model/trip"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// DeleteTrip .
// @router /admin/trip [DELETE]
func DeleteTrip(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.DeleteTripRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetAllTrips .
// @router /admin/trip/all [GET]
func GetAllTrips(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.GetAllTripsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetSomeTrips .
// @router /admin/trip/some [GET]
func GetSomeTrips(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.GetSomeTripsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateTrip .
// @router /trip [POST]
func CreateTrip(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.CreateTripRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetTrip .
// @router /trip [GET]
func GetTrip(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.GetTripRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetTrips .
// @router /trips [GET]
func GetTrips(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.GetTripsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateTrip .
// @router /trip [PUT]
func UpdateTrip(ctx context.Context, c *app.RequestContext) {
	var err error
	var req trip.UpdateTripRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}
